// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function addNewItem(formulaNumber) {
    const additionalInputs = document.getElementById(`additional-inputs-${formulaNumber}`);

    // –ù–æ–≤—ã–π HTML –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ üìô
    const inputFields = `
        <div class="input-group">
            <label>–£—Ä–æ–≤–µ–Ω—å üìô:</label>
            <select class="level-item">
                <option value="5">1 - 5</option>
                <option value="10">6 - 10</option>
                <option value="15">11 - 15</option>
                <option value="20">16 - 20</option>
                <option value="25">21 - 25</option>
                <option value="30">26 - 30</option>
                <option value="35">31 - 35</option>
                <option value="40">36 - 40</option>
                <option value="45">41 - 45</option>
                <option value="50">46 - 50</option>
                <option value="55">51 - 55</option>
                <option value="60">56 - 60</option>
                <option value="65">61 - 65</option>
                <option value="66">66 - 69</option>
                <option value="70">70</option>
            </select>
        </div>
        <div class="input-group">
            <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ üìô:</label>
            <input type="number" class="quantity-item" min="1">
        </div>`;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
    additionalInputs.insertAdjacentHTML('beforeend', inputFields);

    // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    calculateTotal(formulaNumber);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function calculateAdditionalTotal(formulaNumber) {
    const itemQuantities = document.querySelectorAll(`#formula-${formulaNumber} .quantity-item`);
    const itemLevels = document.querySelectorAll(`#formula-${formulaNumber} .level-item`);

    console.log("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", itemQuantities.length, itemLevels.length);

    let totalValue = 0;
    const levelTotals = {};

    for (let i = 0; i < itemQuantities.length; i++) {
        const quantity = parseInt(itemQuantities[i].value) || 0;
        const level = parseInt(itemLevels[i].value) || 0;

        console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i + 1}: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = ${quantity}, –£—Ä–æ–≤–µ–Ω—å = ${level}`);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º priceTable1 –∏–ª–∏ priceTable2 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—É–ª—ã
        const adjustedLevel = formulaNumber === 1 ? (priceTable1[level] || 0) : (priceTable2[level] || 0);

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É: (—É—Ä–æ–≤–µ–Ω—å / 3) * 4 * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const pricePerItem = (adjustedLevel / 3) * 4;
        const levelTotal = pricePerItem * quantity;

        totalValue += levelTotal;
        if (level in levelTotals) {
            levelTotals[level] += levelTotal;
        } else {
            levelTotals[level] = levelTotal;
        }
    }

    return { totalValue, levelTotals };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤
function calculateTotal(formulaNumber) {
    const quantities = document.querySelectorAll(`#formula-${formulaNumber} .quantity`);
    const levels = document.querySelectorAll(`#formula-${formulaNumber} .level`);

    let totalValue = 0;
    const levelTotals = {};

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ DOM
    for (let i = 0; i < quantities.length; i++) {
        const quantity = parseInt(quantities[i].value) || 0;
        const level = parseInt(levels[i].value) || 0;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º priceTable1 –¥–ª—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º—É–ª—ã –∏ priceTable2 –¥–ª—è –≤—Ç–æ—Ä–æ–π
        const price = formulaNumber === 1 ? priceTable1[level] || 0 : priceTable2[level] || 0;
        const levelTotal = quantity * price;

        if (quantity > 0) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0, –¥–æ–±–∞–≤–ª—è–µ–º
            totalValue += levelTotal;
            if (level in levelTotals) {
                levelTotals[level] += levelTotal;
            } else {
                levelTotals[level] = levelTotal;
            }
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è "+üìô" –±–ª–æ–∫–æ–≤
    const itemQuantities = document.querySelectorAll(`#formula-${formulaNumber} .quantity-item`);
    const itemLevels = document.querySelectorAll(`#formula-${formulaNumber} .level-item`);

    // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ "+üìô"
    const levelTotalsExtra = {};

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è "+üìô" –±–ª–æ–∫–æ–≤
    for (let i = 0; i < itemQuantities.length; i++) {
        const quantity = parseInt(itemQuantities[i].value) || 0;
        const level = parseInt(itemLevels[i].value) || 0;

        if (quantity > 0) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0, –¥–æ–±–∞–≤–ª—è–µ–º
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ —É—Ä–æ–≤–Ω—è–º —Å "+üìô"
            const adjustedLevel = formulaNumber === 1 ? (priceTable1[level] || 0) : (priceTable2[level] || 0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            const pricePerItem = (adjustedLevel / 3) * 4;
            const levelTotal = pricePerItem * quantity;

            if (level in levelTotalsExtra) {
                levelTotalsExtra[level] += levelTotal;
            } else {
                levelTotalsExtra[level] = levelTotal;
            }
        }
    }

    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≥–∏–ª—å–¥–∏–∏ –∏ –ø–æ—Ä—Ç–∞–ª–∞
    const multiplier = parseFloat(document.getElementById(`guild-multiplier-${formulaNumber}`).value) || 1;
    const portalmultiplier = parseFloat(document.getElementById(`portal-multiplier-${formulaNumber}`).value) || 1.0;

    // –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã —Å —É—á—ë—Ç–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–µ—â–µ–π –∏ "+üìô"
    let adjustedTotal = totalValue * multiplier * portalmultiplier;
    Object.keys(levelTotalsExtra).forEach(level => {
        adjustedTotal += levelTotalsExtra[level] * multiplier * portalmultiplier; // –£—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è "+üìô"
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultElement = document.getElementById(`result-${formulaNumber}`);
    resultElement.innerHTML = `<strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${formatCurrency(adjustedTotal)} (${adjustedTotal.toFixed(2)})`;

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–µ—â–µ–π (üíç)
    Object.keys(levelTotals).forEach(level => {
        if (levelTotals[level] > 0) {
            resultElement.innerHTML += `<div class="result-small">üìòüìí ${level} —É—Ä–æ–≤–Ω—è: ${formatCurrency(levelTotals[level])} (${levelTotals[level].toFixed(2)})</div>`;
        }
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è "+üìô" –±–ª–æ–∫–æ–≤
    Object.keys(levelTotalsExtra).forEach(level => {
        if (levelTotalsExtra[level] > 0) {
            resultElement.innerHTML += `<div class="result-small">üìô ${level} —É—Ä–æ–≤–Ω—è: ${formatCurrency(levelTotalsExtra[level])} (${levelTotalsExtra[level].toFixed(2)})</div>`;
        }
    });
}
